{"version":3,"sources":["detector/detector.js","assembly.js","serviceWorker.js","index.js"],"names":["Detector","props","videoRef","React","createRef","detectFrame","video","model","detect","then","predictions","checkPredictions","requestAnimationFrame","forEach","prediction","class","state","list","tempL","tempC","count","shift","setState","isStopped","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","current","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","catch","error","console","defaultOptions","loop","autoplay","animationData","confettiData","rendererSettings","preserveAspectRatio","options","width","height","this","eventListeners","eventName","callback","isClickToPauseDisabled","className","key","toUpperCase","autoPlay","playsInline","muted","ref","Component","Assembly","isMobile","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"sqgEAoHeA,E,kDAzGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,SAAWC,IAAMC,YATE,EAwCnBC,YAAc,SAACC,EAAOC,GACpBA,EAAMC,OAAOF,GAAOG,MAAK,SAAAC,GACvB,EAAKC,iBAAiBD,GACtBE,uBAAsB,WACpB,EAAKP,YAAYC,EAAOC,UA5CX,EAiDnBI,iBAAmB,SAAAD,GACjBA,EAAYG,SAAQ,SAAAC,GAClB,GAAGA,EAAWC,QAAU,EAAKC,MAAMC,KAAK,GAAI,CAC1C,IAAMC,EAAQ,EAAKF,MAAMC,KACnBE,EAAQ,EAAKH,MAAMI,MAAQ,EACjCF,EAAMG,QACN,EAAKC,SAAS,CAACL,KAAMC,EAAOE,MAAOD,EAAOI,WAAW,SApDzD,EAAKP,MAAQ,CACXI,MAAO,EACPH,KAAM,CAAC,SAAS,SAAS,WAAW,QAAS,QAAS,YACtDM,WAAW,GANI,E,gEAWE,IAAD,OAClB,GAAIC,UAAUC,cAAgBD,UAAUC,aAAaC,aAAc,CACjE,IAAMC,EAAgBH,UAAUC,aAC7BC,aAAa,CACZE,OAAO,EACPtB,MAAO,CACLuB,WAAY,UAGfpB,MAAK,SAAAqB,GAGJ,OAFAC,OAAOD,OAASA,EAChB,EAAK5B,SAAS8B,QAAQC,UAAYH,EAC3B,IAAII,SAAQ,SAACC,EAASC,GAC3B,EAAKlC,SAAS8B,QAAQK,iBAAmB,WACvCF,WAIFG,EAAeC,MACrBL,QAAQM,IAAI,CAACF,EAAcX,IACxBlB,MAAK,SAAAgC,GACJ,EAAKpC,YAAY,EAAKH,SAAS8B,QAASS,EAAO,OAEhDC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,S,+BAyBZ,IAAD,OAEDE,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeC,EACfC,iBAAkB,CAChBC,oBAAqB,mBAIzB,OACE,6BACE,kBAAC,IAAD,CAAQC,QAASP,EACTQ,MAAM,QACNC,OAAQ,IACR/B,UAAWgC,KAAKvC,MAAMO,UACtBiC,eAAgB,CACd,CACEC,UAAW,WACXC,SAAU,kBAAM,EAAKpC,SAAS,CAACC,WAAU,OAG7CoC,wBAAwB,IAChC,yBAAKC,UAAU,WACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,UAAS,sCACvB,wBAAIA,UAAU,eAAeC,IAAKN,KAAKvC,MAAMI,OAAQmC,KAAKvC,MAAMC,KAAK,GAAG6C,iBAG5E,yBAAKF,UAAU,SACb,wBAAIA,UAAU,UAAd,UAA+BL,KAAKvC,MAAMI,QAE5C,2BACEwC,UAAU,OACVG,UAAQ,EACRC,aAAW,EACXC,OAAK,EACLC,IAAKX,KAAKrD,gB,GAnGGiE,aCWRC,E,uKAdX,OACE,6BACIC,WAGA,yBAAKT,UAAU,WACb,wBAAIA,UAAU,SAAd,qCAHF,kBAAC,EAAD,W,GALaO,aCOHG,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBtD,WACrBA,UAAUuD,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwC,c","file":"static/js/main.c30b4c9b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Lottie from 'react-lottie';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport '@tensorflow/tfjs';\n\nimport './detector.css';\nimport '../animations.css'\n\nimport * as confettiData from '../assets/confetti.json';\n\nclass Detector extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0,\n      list: ['person','laptop','scissors','mouse', 'spoon', 'keyboard',],\n      isStopped: true,\n    }\n  } \n  videoRef = React.createRef();\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      const modelPromise = cocoSsd.load();\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n      this.checkPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  checkPredictions = predictions => {\n    predictions.forEach(prediction => {\n      if(prediction.class === this.state.list[0]) {\n        const tempL = this.state.list;\n        const tempC = this.state.count + 1;\n        tempL.shift();\n        this.setState({list: tempL, count: tempC, isStopped: false});\n      }\n    });\n  };\n\n  render() {\n\n    const defaultOptions = {\n      loop: false,\n      autoplay: false, \n      animationData: confettiData.default,\n      rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice'\n      }\n    };\n\n    return (\n      <div>\n        <Lottie options={defaultOptions}\n                width='100vw'\n                height={500}\n                isStopped={this.state.isStopped}\n                eventListeners={[\n                  {\n                    eventName: 'complete',\n                    callback: () => this.setState({isStopped:true}),\n                  },\n                ]}\n                isClickToPauseDisabled={true}/>\n        <div className='display'>\n          <div className='texts'>\n            <h1 className='static'><i>FIND A</i></h1>\n            <h1 className='target splat' key={this.state.count}>{this.state.list[0].toUpperCase()}</h1>\n          </div>\n        </div>\n        <div className='score'>\n          <h1 className='scoreT'>SCORE: {this.state.count}</h1>\n        </div>\n        <video\n          className=\"feed\"\n          autoPlay\n          playsInline\n          muted\n          ref={this.videoRef}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Detector;\n","import React, {Component} from 'react';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\nimport Detector from './detector/detector.js';\r\n\r\nclass Assembly extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        {!isMobile ? (\r\n          <Detector/>\r\n        ) : (\r\n          <div className='browser'>\r\n            <h1 className='error'>THIS WEB-APP IS FOR MOBILE ONLY.</h1>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Assembly;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Assembly from './assembly.js';\nimport * as serviceWorker from './serviceWorker';\n\nimport './general.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Assembly />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}